"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var strtok3 = require("strtok3");
var ID3v2_1 = require("./ID3v2");
var ID3v2Parser_1 = require("./ID3v2Parser");
var ID3v1Parser_1 = require("../id3v1/ID3v1Parser");
var _debug = require("debug");
var BasicParser_1 = require("../common/BasicParser");
var debug = _debug("music-metadata:parser:ID3");
/**
 * Abstract parser which tries take ID3v2 and ID3v1 headers.
 */
var AbstractID3Parser = /** @class */ (function (_super) {
    __extends(AbstractID3Parser, _super);
    function AbstractID3Parser() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.id3parser = new ID3v2Parser_1.ID3v2Parser();
        return _this;
    }
    AbstractID3Parser.startsWithID3v2Header = function (tokenizer) {
        return tokenizer.peekToken(ID3v2_1.ID3v2Token.Header).then(function (id3Header) { return (id3Header.fileIdentifier === "ID3"); });
    };
    AbstractID3Parser.prototype.parse = function () {
        return this.parseID3v2().catch(function (err) {
            if (err.message === strtok3.endOfFile)
                // ToDo: maybe a warning?
                return;
            else
                throw err;
        });
    };
    AbstractID3Parser.prototype.finalize = function () {
        return;
    };
    AbstractID3Parser.prototype.parseID3v2 = function () {
        var _this = this;
        return this.tryReadId3v2Headers()
            .then(function () {
            debug("End of ID3v2 header, go to MPEG-parser: pos=%s", _this.tokenizer.position);
            return _this._parse();
        })
            .then(function () {
            if (_this.options.skipPostHeaders && _this.metadata.hasAny()) {
                _this.finalize();
            }
            else {
                var id3v1parser = new ID3v1Parser_1.ID3v1Parser();
                return id3v1parser.init(_this.metadata, _this.tokenizer, _this.options).parse().then(function () {
                    _this.finalize();
                });
            }
        });
    };
    AbstractID3Parser.prototype.tryReadId3v2Headers = function () {
        var _this = this;
        return this.tokenizer.peekToken(ID3v2_1.ID3v2Token.Header)
            .then(function (id3Header) {
            if (id3Header.fileIdentifier === "ID3") {
                debug("Found ID3v2 header, pos=%s", _this.tokenizer.position);
                return _this.id3parser.parse(_this.metadata, _this.tokenizer, _this.options)
                    .then(function () { return _this.tryReadId3v2Headers(); });
            }
        });
    };
    return AbstractID3Parser;
}(BasicParser_1.BasicParser));
exports.AbstractID3Parser = AbstractID3Parser;
