"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var es6_promise_1 = require("es6-promise");
var _debug = require("debug");
var debug = _debug("music-metadata:parser:MP4:Atom");
var AtomToken = require("./AtomToken");
var Token = require("token-types");
var Atom = /** @class */ (function () {
    function Atom(header, extended, parent) {
        this.header = header;
        this.extended = extended;
        this.parent = parent;
        this.children = [];
        this.atomPath = (this.parent ? this.parent.atomPath + '/' : '') + this.header.name;
        this.dataLen = this.header.length - (extended ? 16 : 8);
    }
    Atom.prototype.readAtoms = function (tokenizer, dataHandler, size) {
        var _this = this;
        return this.readAtom(tokenizer, dataHandler).then(function (atomBean) {
            _this.children.push(atomBean);
            size -= atomBean.header.length;
            if (size > 0) {
                return _this.readAtoms(tokenizer, dataHandler, size);
            }
        });
    };
    Atom.prototype.readAtom = function (tokenizer, dataHandler) {
        var _this = this;
        // Parse atom header
        var offset = tokenizer.position;
        // debug("Reading next token on offset=%s...", offset); //  buf.toString('ascii')
        return tokenizer.readToken(AtomToken.Header)
            .then(function (header) {
            var extended = header.length === 1;
            if (extended) {
                return tokenizer.readToken(AtomToken.ExtendedSize).then(function (extendedSize) {
                    header.length = extendedSize;
                    return new Atom(header, true, _this);
                });
            }
            else {
                return es6_promise_1.Promise.resolve(new Atom(header, false, _this));
            }
        }).then(function (atomBean) {
            debug("parse atom name=%s, extended=%s, ffset=%s, len=%s ", atomBean.atomPath, atomBean.extended, offset, atomBean.header.length); //  buf.toString('ascii')
            return atomBean.readData(tokenizer, dataHandler).then(function () {
                return atomBean;
            });
        });
    };
    Atom.prototype.readData = function (tokenizer, dataHandler) {
        var _this = this;
        switch (this.header.name) {
            // "Container" atoms, contains nested atoms
            case "moov": // The Movie Atom: contains other atoms
            case "udta": // User defined atom
            case "trak":
            case "mdia": // Media atom
            case "minf": // Media Information Atom
            case "stbl": // The Sample Table Atom
            case "<id>":
            case "ilst":
                return this.readAtoms(tokenizer, dataHandler, this.dataLen);
            case "meta": // Metadata Atom, ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8
                // meta has 4 bytes of padding, ignore
                return tokenizer.readToken(new Token.IgnoreType(4))
                    .then(function () {
                    return _this.readAtoms(tokenizer, dataHandler, _this.dataLen - 4);
                });
            case "mdhd": // Media header atom
            case "mvhd": // 'movie' => 'mvhd': movie header atom; child of Movie Atom
            case "tkhd":
            case "stsz":
            case "mdat":
            default:
                return dataHandler(this);
        }
    };
    return Atom;
}());
exports.Atom = Atom;
