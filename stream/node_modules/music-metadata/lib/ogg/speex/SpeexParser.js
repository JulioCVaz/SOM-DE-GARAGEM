'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Speex = require("./Speex");
var VorbisParser_1 = require("../vorbis/VorbisParser");
var initDebug = require("debug");
var debug = initDebug("music-metadata:parser:ogg:speex");
/**
 * Speex, RFC 5574
 * Ref:
 *   https://www.speex.org/docs/manual/speex-manual/
 *   https://tools.ietf.org/html/rfc5574
 */
var SpeexParser = /** @class */ (function (_super) {
    __extends(SpeexParser, _super);
    function SpeexParser(metadata, options, tokenizer) {
        var _this = _super.call(this, metadata, options) || this;
        _this.tokenizer = tokenizer;
        _this.codecName = 'Speex';
        _this.lastPos = -1;
        return _this;
    }
    /**
     * Parse first Speex Ogg page
     * @param {IPageHeader} header
     * @param {Buffer} pageData
     */
    SpeexParser.prototype.parseFirstPage = function (header, pageData) {
        debug('First Ogg/Speex page');
        var speexHeader = Speex.Header.get(pageData, 0);
        speexHeader = speexHeader;
        this.metadata.setFormat('numberOfChannels', speexHeader.nb_channels);
        this.metadata.setFormat('sampleRate', speexHeader.rate);
        this.metadata.setFormat('encoder', speexHeader.version);
        if (speexHeader.bitrate !== -1) {
            this.metadata.setFormat('bitrate', speexHeader.bitrate);
        }
    };
    return SpeexParser;
}(VorbisParser_1.VorbisParser));
exports.SpeexParser = SpeexParser;
