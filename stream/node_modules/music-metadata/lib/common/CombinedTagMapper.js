"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ID3v1TagMap_1 = require("../id3v1/ID3v1TagMap");
var ID3v24TagMapper_1 = require("../id3v2/ID3v24TagMapper");
var AsfTagMapper_1 = require("../asf/AsfTagMapper");
var ID3v22TagMapper_1 = require("../id3v2/ID3v22TagMapper");
var APEv2TagMapper_1 = require("../apev2/APEv2TagMapper");
var MP4TagMapper_1 = require("../mp4/MP4TagMapper");
var VorbisTagMapper_1 = require("../ogg/vorbis/VorbisTagMapper");
var RiffInfoTagMap_1 = require("../riff/RiffInfoTagMap");
var CombinedTagMapper = /** @class */ (function () {
    function CombinedTagMapper() {
        var _this = this;
        this.tagMappers = {};
        [
            new ID3v1TagMap_1.ID3v1TagMapper(),
            new ID3v22TagMapper_1.ID3v22TagMapper(),
            new ID3v24TagMapper_1.ID3v24TagMapper(),
            new MP4TagMapper_1.MP4TagMapper(),
            new MP4TagMapper_1.MP4TagMapper(),
            new VorbisTagMapper_1.VorbisTagMapper(),
            new APEv2TagMapper_1.APEv2TagMapper(),
            new AsfTagMapper_1.AsfTagMapper(),
            new RiffInfoTagMap_1.RiffInfoTagMapper()
        ].forEach(function (mapper) {
            _this.registerTagMapper(mapper);
        });
    }
    /**
     * Convert native to generic (common) tags
     * @param tagType Originating tag format
     * @param tag     Native tag to map to a generic tag id
     * @return Generic tag result (output of this function)
     */
    CombinedTagMapper.prototype.mapTag = function (tagType, tag) {
        var tagMapper = this.tagMappers[tagType];
        if (tagMapper) {
            return this.tagMappers[tagType].mapGenericTag(tag);
        }
        throw new Error("No generic tag mapper defined for tag-format: " + tagType);
    };
    CombinedTagMapper.prototype.registerTagMapper = function (genericTagMapper) {
        for (var _i = 0, _a = genericTagMapper.tagTypes; _i < _a.length; _i++) {
            var tagType = _a[_i];
            this.tagMappers[tagType] = genericTagMapper;
        }
    };
    return CombinedTagMapper;
}());
exports.CombinedTagMapper = CombinedTagMapper;
